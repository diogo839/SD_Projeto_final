package cliente;

import javax.swing.*;
import java.awt.event.*;
import java.rmi.RemoteException;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import projetoFinal.Cliente;

public class ClientFrame extends JFrame {

    private Card card;
    private CardLabel cardLabel;
    private Deck gameDeck;
    private Cliente cliente;

    public ClientFrame() {

        initComponents();

        this.LoginPanel.setVisible(true);
        System.out.println(this.LoginPanel);
        this.TablePanel.setVisible(false);

        gameDeck = new Deck();         // cria um baralho
        gameDeck.shuffle();            // embaralha

        drawHand();

        drawBlackjack();

    }

    private void drawBlackjack() {
        // cartas do dealer
        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage("bv");
        cardLabel.setCardCovered(false);
        cardLabel.setLocation(270, 150);
        this.TablePanel.add(cardLabel);

        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(false);
        cardLabel.setLocation(350, 150);
        this.TablePanel.add(cardLabel);

        // cartas do player 1
        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(true);
        cardLabel.setLocation(530, 350);
        this.TablePanel.add(cardLabel);

        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(false);
        cardLabel.setLocation(550, 350);
        this.TablePanel.add(cardLabel);

        // cartas do player 2
        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(true);
        cardLabel.setLocation(300, 350);
        this.TablePanel.add(cardLabel);

        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(false);
        cardLabel.setLocation(320, 350);
        this.TablePanel.add(cardLabel);

        // cartas do player 3
        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(true);
        cardLabel.setLocation(80, 350);
        this.TablePanel.add(cardLabel);

        cardLabel = new CardLabel();
        card = gameDeck.deal();
        cardLabel.setCardImage(card.getName());
        cardLabel.setCardCovered(false);
        cardLabel.setLocation(100, 350);
        this.TablePanel.add(cardLabel);
    }

    // apresenta as 13 primeiras cartas do deck (para teste apenas)
    private void drawHand() {

        CardLabel[] myCardLabels = new CardLabel[13];
        List<CardLabel> labelList = new ArrayList<CardLabel>();

        for (int i = 0; i < 13; i++) {
            myCardLabels[i] = new CardLabel();            // cria o label da carta (vazio)
            this.TablePanel.add(myCardLabels[i]);         // adiciona a carta no panel da mesa
        }
        Card[] myHand = gameDeck.getHand();   // obtem as cartas 

        // para cada carta
        for (int i = 0; i < myHand.length; i++) {
            labelList.add(myCardLabels[i]);                     // adiciona o label numa lista    
            myCardLabels[i].setCardImage(myHand[i].getName());  // define a imagem da carta

        }

        // posiciona as cartas 
        boolean covered = true;
        int nCards = labelList.size();
        for (int i = 0; i < nCards; i++) {
            if (i == (nCards - 1)) {
                covered = false;  // a última é totalmente visivel
            }
            labelList.get(i).setCardCovered(covered);
            labelList.get(i).setLocation(200 + i * 20, 20);
        }
    }

    private void mensagemErro(String mensagem) {
        JOptionPane.showMessageDialog(rootPane, mensagem, "Mensagem de erro", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TablePanel = new javax.swing.JPanel();
        LoginPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        ipTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        portoTextField = new javax.swing.JTextField();
        nomeTextField = new javax.swing.JTextField();
        JbuttonEntrar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Card Game GUI");
        setResizable(false);
        setSize(new java.awt.Dimension(700, 526));
        getContentPane().setLayout(new java.awt.CardLayout());

        TablePanel.setBackground(new java.awt.Color(0, 153, 0));

        javax.swing.GroupLayout TablePanelLayout = new javax.swing.GroupLayout(TablePanel);
        TablePanel.setLayout(TablePanelLayout);
        TablePanelLayout.setHorizontalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 700, Short.MAX_VALUE)
        );
        TablePanelLayout.setVerticalGroup(
            TablePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 526, Short.MAX_VALUE)
        );

        getContentPane().add(TablePanel, "card2");

        LoginPanel.setEnabled(false);

        jLabel1.setText("Porto:");

        jLabel2.setText("Nome:");

        jLabel3.setText("IP:");

        JbuttonEntrar.setText("Entrar");
        JbuttonEntrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JbuttonEntrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout LoginPanelLayout = new javax.swing.GroupLayout(LoginPanel);
        LoginPanel.setLayout(LoginPanelLayout);
        LoginPanelLayout.setHorizontalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(36, 36, 36)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(264, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, LoginPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(JbuttonEntrar)
                .addGap(288, 288, 288))
        );
        LoginPanelLayout.setVerticalGroup(
            LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(LoginPanelLayout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ipTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portoTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(LoginPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nomeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addComponent(JbuttonEntrar)
                .addContainerGap(235, Short.MAX_VALUE))
        );

        getContentPane().add(LoginPanel, "card3");
        LoginPanel.getAccessibleContext().setAccessibleName("LoginPanel");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JbuttonEntrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JbuttonEntrarActionPerformed
        String ip = this.ipTextField.getText();
        String portoString = this.portoTextField.getText();
        String nome = this.nomeTextField.getText();
        boolean entrar = true;
        int porto = 0;
        
        try{
                  cliente = new Cliente();
        }catch(RemoteException e){
             mensagemErro("Houve um erro!!");
            
        }
  

        if (ip.equalsIgnoreCase("")) {
            mensagemErro("Introduza o ip!!");

            entrar = false;
        }

        if (portoString.equalsIgnoreCase("")) {
            mensagemErro("Introduza o porto!!");

            entrar = false;
        }

        if (nome.equalsIgnoreCase("")) {
            mensagemErro("Introduza o nome!!");
            entrar = false;
        }

        String zeroTo255
                = "(\\d{1,2}|(0|1)\\"
                + "d{2}|2[0-4]\\d|25[0-5])";
   
        String regex
                = zeroTo255 + "\\."
                + zeroTo255 + "\\."
                + zeroTo255 + "\\."
                + zeroTo255;

        Pattern p = Pattern.compile(regex);

        Matcher m = p.matcher(ip);

        if (!m.matches()) {
            mensagemErro("O endereço IP não é válido!!\nVolte a Introduzir.");

            this.ipTextField.setText("");
            entrar = false;

        }
        
          m = Pattern.compile("\\d{0,5}").matcher(portoString);
       
        if (!m.matches()) {
             mensagemErro("O porto não é válido!!\nVolte a Introduzir.");
            entrar = false;
           
        }
        
        try {
            porto = Integer.parseInt(portoString);
        } catch (NumberFormatException e) {
            entrar = false;
        }
        
        
        if (entrar) {
            
       
            cliente.login(nome, ip, porto);
            this.LoginPanel.setVisible(false);
            this.TablePanel.setVisible(true);
        }

    }//GEN-LAST:event_JbuttonEntrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JbuttonEntrar;
    private javax.swing.JPanel LoginPanel;
    private javax.swing.JPanel TablePanel;
    private javax.swing.JTextField ipTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField nomeTextField;
    private javax.swing.JTextField portoTextField;
    // End of variables declaration//GEN-END:variables

}
